#!/bin/sh
#
# Copyright (C) 2021-2022 Sing Yu Chan <i@pexcn.me>
#
# The design idea was derived from ss-rules by Jian Chang <aa65535@live.com> and Yousong Zhou <yszhou4tech@gmail.com>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

# shellcheck disable=SC2155,SC3043

TRANSPROXY_NAME="${0##*/}"
TRANSPROXY_VERSION=0.4.1

TRANSPROXY_PREFIX_IPTABLES="TRANSPROXY_"
TRANSPROXY_PREFIX_IPSET="transproxy_"

TRANSPROXY_SRC_DIRECT=transproxy_src_direct
TRANSPROXY_SRC_PROXY=transproxy_src_proxy
TRANSPROXY_SRC_NORMAL=transproxy_src_normal
TRANSPROXY_DST_DIRECT=transproxy_dst_direct
TRANSPROXY_DST_PROXY=transproxy_dst_proxy
TRANSPROXY_DST_SPECIAL=transproxy_dst_special

_print_usage() {
  cat <<EOF
$TRANSPROXY_NAME $TRANSPROXY_VERSION
A bridge of linux and transparent proxy.

USAGE:
    $TRANSPROXY_NAME [OPTIONS]

OPTIONS:
    -t, --tcp-port       TCP transparent proxy port, support tproxy only.
    -u, --udp-port       UDP transparent proxy port, support tproxy only.
        --src-direct     Specify one or more source ip lists, outbound traffic from these ips
                         will be directly connected.
        --src-proxy      Specify one or more source ip lists, outbound traffic from these ips
                         will be pass through proxy.
        --src-normal     Specify one or more source ip lists, outbound traffic from these ips
                         will decide whether to pass through proxy according to the destination
                         ip lists.
        --dst-direct     Specify one or more destination ip lists, these ips will be directly
                         connected.
        --dst-proxy      Specify one or more destination ip lists, these ips will be pass
                         through proxy.
        --src-default    Default action for inbound traffic, available values: DIRECT, PROXY, NORMAL.
        --dst-default    Default action for outbound traffic, available values: DIRECT, PROXY.
        --self-proxy     Make local traffic pass through proxy, default as gateway only.
    -s, --server         Specify one or more ip addresses of the remote server, local and server
                         traffic will be directly connected.
    -i, --interface      Apply to specified network interface.
    -e, --extra          The specified parameters will be append to iptables.
    -m, --mark           Bypass outbound traffic with SO_MARK as specified value, it's a workaround
                         when the remote server doesn't have a static ip address.
                         [NOTE]: Not all clients support setting SO_MARK, and there may be
                         performance issues.
    -v, --verbose        Enable verbose logging.
    -f, --flush          Flush $TRANSPROXY_NAME rules then exit.
    -h, --help           Show this help message then exit.
EOF
}

_add_prefix() {
  sed "s/^/$1/"
}

_remove_empty() {
  sed '/^[[:space:]]*$/d'
}

_remove_comment() {
  sed '/^#/d'
}

_trim() {
  awk '{$1=$1};1'
}

_split_by_space() {
  [ -n "$1" ] || return 0
  echo "$1" | tr ',' ' '
}

_splice_content() {
  [ -n "$1" ] || return 0
  for file in $(_split_by_space "$1"); do cat "$file"; done
}

_apply_sysctl() {
  [ "$(sysctl -n "$1")" != "$2" ] && sysctl -wq "$1"="$2"
}

_get_reserved_ip() {
  cat <<-EOF
	0.0.0.0/8
	10.0.0.0/8
	100.64.0.0/10
	127.0.0.0/8
	169.254.0.0/16
	172.16.0.0/12
	192.0.0.0/24
	192.0.2.0/24
	192.31.196.0/24
	192.52.193.0/24
	192.88.99.0/24
	192.168.0.0/16
	192.175.48.0/24
	198.18.0.0/15
	198.51.100.0/24
	203.0.113.0/24
	224.0.0.0/4
	240.0.0.0/4
	255.255.255.255
	EOF
}

_get_special_ip() {
  echo "$SERVER_IPS" | tr ',' '\n' | grep -Eo "^([0-9]{1,3}\.){3}[0-9]{1,3}"
  ip route get 8.8.8.8 | sed 's/^.*src \([^ ]*\).*$/\1/;q'
}

_get_time() {
  date '+%Y-%m-%d %T'
}

debug() {
  [ "$VERBOSE" = 1 ] || return 0
  local time="$(_get_time)"
  printf "[${time}] [DEBUG]: %s\n" "$*"
}

info() {
  local green='\e[0;32m'
  local clear='\e[0m'
  local time="$(_get_time)"
  printf "${green}[${time}] [INFO]: ${clear}%s\n" "$*"
}

warn() {
  local yellow='\e[1;33m'
  local clear='\e[0m'
  local time="$(_get_time)"
  printf "${yellow}[${time}] [WARN]: ${clear}%s\n" "$*" >&2
}

error() {
  local red='\e[0;31m'
  local clear='\e[0m'
  local time="$(_get_time)"
  printf "${red}[${time}] [ERROR]: ${clear}%s\n" "$*" >&2
}

generate_ipset_rules() {
  _splice_content "$SRC_DIRECT_FILES" | _remove_empty | _remove_comment | _trim | _add_prefix "add $TRANSPROXY_SRC_DIRECT "
  _splice_content "$SRC_PROXY_FILES" | _remove_empty | _remove_comment | _trim | _add_prefix "add $TRANSPROXY_SRC_PROXY "
  _splice_content "$SRC_NORMAL_FILES" | _remove_empty | _remove_comment | _trim | _add_prefix "add $TRANSPROXY_SRC_NORMAL "
  _splice_content "$DST_DIRECT_FILES" | _remove_empty | _remove_comment | _trim | _add_prefix "add $TRANSPROXY_DST_DIRECT "
  _splice_content "$DST_PROXY_FILES" | _remove_empty | _remove_comment | _trim | _add_prefix "add $TRANSPROXY_DST_PROXY "
  _get_reserved_ip | _remove_empty | _remove_comment | _trim | _add_prefix "add $TRANSPROXY_DST_SPECIAL "
  _get_special_ip | _remove_empty | _remove_comment | _trim | _add_prefix "add $TRANSPROXY_DST_SPECIAL "
}

create_transproxy_chain() {
  iptables-restore -n <<-EOF
	*mangle

	:TRANSPROXY_SRC_PREPARE - [0:0]
	:TRANSPROXY_SRC_AC - [0:0]
	:TRANSPROXY_DST_AC - [0:0]
	:TRANSPROXY_DST_FORWARD - [0:0]

	# PREPARE
	-A TRANSPROXY_SRC_PREPARE -m set --match-set $TRANSPROXY_DST_SPECIAL dst -j RETURN
	-A TRANSPROXY_SRC_PREPARE -p tcp $IPT_EXTRAS -j TRANSPROXY_SRC_AC
	-A TRANSPROXY_SRC_PREPARE -p udp $IPT_EXTRAS -j TRANSPROXY_SRC_AC

	# SRC
	-A TRANSPROXY_SRC_AC -m set --match-set $TRANSPROXY_SRC_DIRECT src -j RETURN
	-A TRANSPROXY_SRC_AC -m set --match-set $TRANSPROXY_SRC_PROXY src -j TRANSPROXY_DST_FORWARD
	-A TRANSPROXY_SRC_AC -m set --match-set $TRANSPROXY_SRC_NORMAL src -j TRANSPROXY_DST_AC
	-A TRANSPROXY_SRC_AC -j ${SRC_DEFAULT:=TRANSPROXY_DST_AC}

	# DST
	-A TRANSPROXY_DST_AC -m set --match-set $TRANSPROXY_DST_DIRECT dst -j RETURN
	-A TRANSPROXY_DST_AC -m set --match-set $TRANSPROXY_DST_PROXY dst -j TRANSPROXY_DST_FORWARD
	-A TRANSPROXY_DST_AC -j ${DST_DEFAULT:=TRANSPROXY_DST_FORWARD}

	COMMIT
	EOF

  [ -z "$TCP_PORT" ] || iptables -t mangle -A TRANSPROXY_DST_FORWARD -p tcp -j TPROXY --on-ip 127.0.0.1 --on-port "$TCP_PORT" --tproxy-mark 1
  [ -z "$UDP_PORT" ] || iptables -t mangle -A TRANSPROXY_DST_FORWARD -p udp -j TPROXY --on-ip 127.0.0.1 --on-port "$UDP_PORT" --tproxy-mark 1

  debug "$TRANSPROXY_NAME chain created."
}

apply_transproxy_rules() {
  if [ -z "$INTERFACES" ]; then
    iptables -t mangle -I PREROUTING 1 -j TRANSPROXY_SRC_PREPARE
    debug "$TRANSPROXY_NAME rules applied."
  else
    for interface in $(_split_by_space "$INTERFACES"); do
      iptables -t mangle -I PREROUTING 1 -i "$interface" -j TRANSPROXY_SRC_PREPARE
      debug "$TRANSPROXY_NAME rules apply to $interface interface."
    done
  fi
}

apply_self_proxy_rules() {
  iptables -t mangle -N TRANSPROXY_DST_PREPARE
  iptables -t mangle -A TRANSPROXY_DST_PREPARE -m set --match-set $TRANSPROXY_DST_SPECIAL dst -j RETURN

  # negate matching in non-[DIRECT|PROXY] mode
  [ "$DST_DEFAULT" = "RETURN" ] || iptables -t mangle -A TRANSPROXY_DST_PREPARE -m set --match-set $TRANSPROXY_DST_DIRECT dst -j RETURN
  # shellcheck disable=SC2086
  [ "$DST_DEFAULT" = "TRANSPROXY_DST_FORWARD" ] || {
    iptables -t mangle -A TRANSPROXY_DST_PREPARE -p tcp -m set --match-set $TRANSPROXY_DST_PROXY dst $IPT_EXTRAS -j MARK --set-mark 1
    iptables -t mangle -A TRANSPROXY_DST_PREPARE -p udp -m set --match-set $TRANSPROXY_DST_PROXY dst $IPT_EXTRAS -j MARK --set-mark 1
  }

  # avoid traffic loopback issues, reference: https://github.com/v2ray/v2ray-core/issues/2621
  [ -z "$DIRECT_MARK" ] || iptables -t mangle -A TRANSPROXY_DST_PREPARE -m mark --mark "$DIRECT_MARK" -j RETURN

  # only makes sense in non-DIRECT mode
  # shellcheck disable=SC2086
  if [ "$DST_DEFAULT" != "RETURN" ]; then
    iptables -t mangle -A TRANSPROXY_DST_PREPARE -p tcp $IPT_EXTRAS -j MARK --set-mark 1
    iptables -t mangle -A TRANSPROXY_DST_PREPARE -p udp $IPT_EXTRAS -j MARK --set-mark 1
  fi

  iptables -t mangle -I OUTPUT 1 -j TRANSPROXY_DST_PREPARE
  debug "$TRANSPROXY_NAME rules apply to self host."
}

apply_tcp_divert() {
  iptables -t mangle -N TRANSPROXY_TCP_DIVERT
  iptables -t mangle -A TRANSPROXY_TCP_DIVERT -j MARK --set-mark 1
  iptables -t mangle -A TRANSPROXY_TCP_DIVERT -j ACCEPT
  iptables -t mangle -I PREROUTING 1 -p tcp -m socket -j TRANSPROXY_TCP_DIVERT
  debug "tcp divert rules optimized."
}

prepare_environment() {
  # check environment
  modinfo xt_TPROXY >/dev/null 2>&1 || {
    error "xt_TPROXY kernel module is not supported."
    exit 1
  }
  modinfo xt_mark >/dev/null 2>&1 || {
    error "xt_mark kernel module is not supported."
    exit 1
  }
  command -v ip >/dev/null || {
    error "ip command not found."
    exit 1
  }
  command -v ipset >/dev/null || {
    error "ipset command not found."
    exit 1
  }
  command -v iptables >/dev/null || {
    error "iptables command not found."
    exit 1
  }

  # fix environment, reference: https://nobb.site/2022/02/18/0x72/
  _apply_sysctl net.bridge.bridge-nf-call-iptables 0 && warn "TPROXY requires net.bridge.bridge-nf-call-iptables=0, applied."
}

flush_rules() {
  iptables-save --counters | grep -v "$TRANSPROXY_PREFIX_IPTABLES" | iptables-restore --counters
  debug "iptables flushed."

  ip rule del fwmark 1 lookup 100 2>/dev/null
  ip route del local default dev lo table 100 2>/dev/null
  ip route flush table 100 2>/dev/null
  debug "routes removed."

  for name in $(ipset -n list | grep "$TRANSPROXY_PREFIX_IPSET"); do
    ipset flush "$name" 2>/dev/null
    ipset destroy "$name" 2>/dev/null
    debug "ipset $name destroyed."
  done
  debug "ipsets destroyed."

  info "$TRANSPROXY_NAME rules flushed."
}

init_ipset() {
  ipset -exist restore <<-EOF
	create $TRANSPROXY_SRC_DIRECT hash:ip hashsize 64 family inet
	create $TRANSPROXY_SRC_PROXY hash:ip hashsize 64 family inet
	create $TRANSPROXY_SRC_NORMAL hash:ip hashsize 64 family inet
	create $TRANSPROXY_DST_DIRECT hash:net hashsize 64 family inet
	create $TRANSPROXY_DST_PROXY hash:net hashsize 64 family inet
	create $TRANSPROXY_DST_SPECIAL hash:net hashsize 64 family inet
	$(generate_ipset_rules)
	EOF
  info "ipsets created."
}

init_route() {
  ip rule add fwmark 1 lookup 100
  ip route add local default dev lo table 100
  info "routes added."
}

init_iptables() {
  # create common transproxy chain for mangle table, it's required for both tcp and udp.
  create_transproxy_chain
  # jump in from PREROUTING chain, make it works.
  apply_transproxy_rules
  [ -z "$SELF_PROXY" ] || apply_self_proxy_rules
  apply_tcp_divert
  info "iptables applied."
}

parse_args() {
  local args="$*"
  local args_num="$#"
  while [ "$#" -gt 0 ]; do
    case "$1" in
      -t | --tcp-port)
        TCP_PORT="$2"
        shift 2
        ;;
      -u | --udp-port)
        UDP_PORT="$2"
        shift 2
        ;;
      --src-direct)
        SRC_DIRECT_FILES="$2"
        shift 2
        ;;
      --src-proxy)
        SRC_PROXY_FILES="$2"
        shift 2
        ;;
      --src-normal)
        SRC_NORMAL_FILES="$2"
        shift 2
        ;;
      --dst-direct)
        DST_DIRECT_FILES="$2"
        shift 2
        ;;
      --dst-proxy)
        DST_PROXY_FILES="$2"
        shift 2
        ;;
      --src-default)
        case "$2" in
          direct | DIRECT) SRC_DEFAULT=RETURN ;;
          proxy | PROXY) SRC_DEFAULT=TRANSPROXY_DST_FORWARD ;;
          normal | NORMAL) SRC_DEFAULT=TRANSPROXY_DST_AC ;;
          *)
            error "wrong option: $1 $2"
            exit 2
            ;;
        esac
        shift 2
        ;;
      --dst-default)
        case "$2" in
          direct | DIRECT) DST_DEFAULT=RETURN ;;
          proxy | PROXY) DST_DEFAULT=TRANSPROXY_DST_FORWARD ;;
          *)
            error "wrong option: $1 $2"
            exit 2
            ;;
        esac
        shift 2
        ;;
      --self-proxy)
        SELF_PROXY=1
        shift 1
        ;;
      -s | --server)
        SERVER_IPS="$2"
        shift 2
        ;;
      -i | --interface)
        INTERFACES="$2"
        shift 2
        ;;
      -e | --extra)
        IPT_EXTRAS="$2"
        shift 2
        ;;
      -m | --mark)
        DIRECT_MARK="$2"
        shift 2
        ;;
      -v | --verbose)
        VERBOSE=1
        shift 1
        ;;
      -f | --flush)
        FLUSH=1
        shift 1
        ;;
      -h | --help)
        _print_usage
        exit 0
        ;;
      *)
        error "unknown option: $1"
        exit 2
        ;;
    esac
  done

  debug "received arguments: $args"
  [ -z "$IPT_EXTRAS" ] || warn "this parameters will be passed to iptables: $IPT_EXTRAS"

  if [ -n "$FLUSH" ]; then
    [ "$args_num" = 1 ] || warn "invalid arguments other than [-f|--flush] or [-v|--verbose]."
    prepare_environment
    flush_rules
    exit 0
  fi
  if [ -z "$TCP_PORT" ] && [ -z "$UDP_PORT" ]; then
    error "[-t|--tcp-port] or [-u|--udp-port] is required."
    exit 2
  fi
  if [ -z "$SERVER_IPS" ] && [ -z "$DIRECT_MARK" ]; then
    error "[-s|--server] or [-m|--mark] is required."
    exit 2
  fi
  if [ -n "$SERVER_IPS" ] && [ -n "$DIRECT_MARK" ]; then
    warn "[-s|--server] and [-m|--mark] only recommend one of them."
  fi
}

parse_args "$@"
prepare_environment
flush_rules
init_ipset
init_route
init_iptables
